/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.table.DefaultTableModel;
import models.AcademicYear;
import models.Exam;
import models.Session;
import models.Student;
import models.Subject;
import static services.AcademicYearService.getAcademicYears;
import services.ExamService;
import services.SessionService;
import services.SessionSubjectService;
import services.StudentService;
import services.SubjectService;

/**
 *
 * @author user
 */
public class Result extends javax.swing.JFrame {

    public Result() {
        initComponents();
        loadYearCbx();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        yearsCbx = new javax.swing.JComboBox<>();
        subjectCbx = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentsTable = new javax.swing.JTable();
        studentCbx = new javax.swing.JComboBox<>();
        sessionCbx = new javax.swing.JComboBox<>();
        returnToMenu = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Result");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Select Year");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Select Session");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Select Subject");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Select Student");

        yearsCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        yearsCbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearsCbxItemStateChanged(evt);
            }
        });

        subjectCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        studentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(studentsTable);

        studentCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        studentCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentCbxActionPerformed(evt);
            }
        });

        sessionCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        returnToMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnToMenu.setForeground(new java.awt.Color(51, 102, 0));
        returnToMenu.setText(">>>Return to menu");
        returnToMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnToMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(yearsCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sessionCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(subjectCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addGap(71, 71, 71))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(returnToMenu)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(returnToMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearsCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sessionCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentCbx))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yearsCbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearsCbxItemStateChanged
        if (yearsCbx.getSelectedItem() != null) {
            loadSessionsCbx();
        }

    }//GEN-LAST:event_yearsCbxItemStateChanged

    private void studentCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentCbxActionPerformed
        if (sessionCbx.getSelectedItem() != null && subjectCbx.getSelectedItem() != null && studentCbx.getSelectedItem() != null) {
            AcademicYear selectedYear = (AcademicYear) yearsCbx.getSelectedItem();
            Session selectedSession = (Session) sessionCbx.getSelectedItem();
            Subject selectedSubject = (Subject) subjectCbx.getSelectedItem();
            Student selectedStudent = (Student) studentCbx.getSelectedItem();
            List<Exam> exams = SessionSubjectService.getExamsBySessionAndSubject(selectedSession, selectedSubject);

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            studentsTable.setModel(model);

            String[] columnNames = {"Year", "Session", "Subject", "Modality", "Student", "Note/20", "Student coefficient", "Coefficient", "Exam Status"};
            model.setColumnIdentifiers(columnNames);

            for (Exam objExam : exams) {

                double studentScore;
                double examScore;
                int coefficient;
                String modality;
                double studentCoefficient;

                if (ExamService.hasStudentPassedExam(objExam, selectedStudent)) {

                    studentScore = (ExamService.getStudentScore());
                    examScore = (ExamService.getExamScore());
                    coefficient = objExam.getCoefficient();
                    modality = objExam.getModality();
                    studentCoefficient = studentScore * (coefficient / examScore);

                    Object[] row = {selectedYear, selectedSession, selectedSubject, modality, selectedStudent, studentScore, studentCoefficient, coefficient, "Passed"};
                    model.addRow(row);
                } else if (ExamService.getStudentScore() >= 0) {
                    studentScore = (ExamService.getStudentScore());
                    examScore = (ExamService.getExamScore());
                    coefficient = objExam.getCoefficient();
                    modality = objExam.getModality();
                    studentCoefficient = studentScore * (coefficient / examScore);

                    Object[] row = {selectedYear, selectedSession, selectedSubject, modality, selectedStudent, studentScore, studentCoefficient, coefficient, "Failed"};
                    model.addRow(row);

                }

            }
        }
    }//GEN-LAST:event_studentCbxActionPerformed

    private void returnToMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnToMenuMouseClicked
        Employee employee = new Employee();
        employee.setVisible(true);
        dispose();
    }//GEN-LAST:event_returnToMenuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Result().setVisible(true);
            }
        });
    }

    private void loadYearCbx() {
        Set<AcademicYear> academicYears = new TreeSet<>();
        academicYears.addAll(getAcademicYears());

        yearsCbx.removeAllItems();
        yearsCbx.addItem(null);
        for (AcademicYear year : academicYears) {
            yearsCbx.addItem(year);
        }
    }

    private void loadSubjectsCbx() {
        List<Subject> allSubjects = SubjectService.getAllSubjects();
        Set<Subject> subjects = new TreeSet<>(Comparator.comparing(Subject::getName));
        subjects.addAll(allSubjects);
        subjectCbx.removeAllItems();
        subjectCbx.addItem(null);
        for (Subject objSubject : subjects) {
            subjectCbx.addItem(objSubject);
        }
    }

    private void loadStudentsCbx() {
        List<Student> allStudents = StudentService.getStudentsList();

        studentCbx.removeAllItems();
        studentCbx.addItem(null);
        for (Student objStudent : allStudents) {
            studentCbx.addItem(objStudent);
        }
    }

    private void loadSessionsCbx() {
        if (yearsCbx.getSelectedItem() != null) {
            AcademicYear year = (AcademicYear) yearsCbx.getSelectedItem();
            List<Session> sessions = SessionService.getExaminationSessionsByYear(year.getYear());
            sessionCbx.removeAllItems();
            for (Session objSession : sessions) {
                sessionCbx.addItem(objSession);
            }
            loadStudentsCbx();
            loadSubjectsCbx();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel returnToMenu;
    private javax.swing.JComboBox<Session> sessionCbx;
    private javax.swing.JComboBox<Student> studentCbx;
    private javax.swing.JTable studentsTable;
    private javax.swing.JComboBox<Subject> subjectCbx;
    private javax.swing.JComboBox<AcademicYear> yearsCbx;
    // End of variables declaration//GEN-END:variables
}
