/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import models.Answer;
import models.Corrector;
import models.Exam;
import models.Exercise;
import models.Question;
import models.Session;
import models.Student;
import models.Subject;
import services.AnswerService;
import services.CorrectorService;
import services.ExamService;
import services.ExerciseService;
import services.QuestionService;
import services.SessionSubjectService;
import services.StudentService;
import services.SubjectService;

public class Corrector_Interface extends javax.swing.JFrame {

    private Session session;

    public Corrector_Interface() {
        initComponents();
    }

    public Corrector_Interface(Session session) {
        initComponents();
        this.session = session;
        loadSessionType(session);
        loadSubjectCbx();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sessionType = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        subjectCbx = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        correctorCbx = new javax.swing.JComboBox<>();
        returnToMenu = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        examTable = new javax.swing.JTable();
        examSection = new javax.swing.JPanel();
        correct = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        studentCbx = new javax.swing.JComboBox<>();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Corrector");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Corrector Interface");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Exam:");

        sessionType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sessionType.setText("Partiel yyyy");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Subject:");

        subjectCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        subjectCbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectCbxItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Corrector:");

        correctorCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        correctorCbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                correctorCbxItemStateChanged(evt);
            }
        });

        returnToMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        returnToMenu.setForeground(new java.awt.Color(51, 102, 0));
        returnToMenu.setText(">>>Return to menu");
        returnToMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnToMenuMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setText("Pending Correction Exams");

        examTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        examTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                examTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(examTable);

        javax.swing.GroupLayout examSectionLayout = new javax.swing.GroupLayout(examSection);
        examSection.setLayout(examSectionLayout);
        examSectionLayout.setHorizontalGroup(
            examSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        examSectionLayout.setVerticalGroup(
            examSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        correct.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        correct.setText("Correct");
        correct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correctActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Student Pending Correction");

        studentCbx.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnToMenu))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subjectCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(correctorCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(examSection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(studentCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sessionType))
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                        .addComponent(correct, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnToMenu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sessionType)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(subjectCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(correctorCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(studentCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(correct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(examSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnToMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnToMenuMouseClicked
        Employee employee = new Employee();
        employee.setVisible(true);
        dispose();
    }//GEN-LAST:event_returnToMenuMouseClicked

    private void correctorCbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_correctorCbxItemStateChanged
        Corrector selectedCorrector = (Corrector) correctorCbx.getSelectedItem();

        if (selectedCorrector == null) {
            DefaultTableModel model = new DefaultTableModel() {
            };
            examTable.setModel(model);
            examSection.removeAll();
            examSection.revalidate();
            examSection.repaint();
        } else {
            Subject selectedSubject = (Subject) subjectCbx.getSelectedItem();
            studentCbx.removeAllItems();
            populateExamTable(session, selectedSubject, selectedCorrector);
        }
    }//GEN-LAST:event_correctorCbxItemStateChanged

    private void correctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correctActionPerformed
        if (subjectCbx.getSelectedItem() == null || correctorCbx.getSelectedItem() == null || examTable.getSelectedRow() == -1 || studentCbx.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Please Select A Subject,a Student,an Exam And Your Name", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String examId = (String) examTable.getValueAt(examTable.getSelectedRow(), 0);
            Exam exam = ExamService.getExamById(examId);
            Corrector selectedCorrector = (Corrector) correctorCbx.getSelectedItem();
            Student selectedStudent = (Student) studentCbx.getSelectedItem();
            printExercises(exam, selectedCorrector, selectedStudent);
        }
    }//GEN-LAST:event_correctActionPerformed

    private void examTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examTableMouseClicked
        Exam selectedExam = ExamService.getExamById((String) examTable.getValueAt(examTable.getSelectedRow(), 0));
        Corrector selectedCorrector = (Corrector) correctorCbx.getSelectedItem();
        List<Student> allStudents = StudentService.getStudentsList();
        List<Student> eligibleStudents = new ArrayList<>();

        for (Student objStudent : allStudents) {
            if (ExamService.hasStudentCompletedExamWaitingCorrection(selectedExam, objStudent, selectedCorrector)) {
                eligibleStudents.add(objStudent);
            }
        }

        DefaultComboBoxModel<Student> comboBoxModel = new DefaultComboBoxModel<>(eligibleStudents.toArray(new Student[0]));
        studentCbx.setModel(comboBoxModel);
        studentCbx.insertItemAt(null, 0);
        studentCbx.setSelectedIndex(0);
    }//GEN-LAST:event_examTableMouseClicked

    private void subjectCbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectCbxItemStateChanged
        if (subjectCbx.getSelectedItem() == null) {
            correctorCbx.setEnabled(false);
        } else {
            correctorCbx.setEnabled(true);
        }
        loadCorrectorCbx();
    }//GEN-LAST:event_subjectCbxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Corrector_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Corrector_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Corrector_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Corrector_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Corrector_Interface().setVisible(true);
            }
        });
    }

    private void loadSessionType(Session session) {
        sessionType.setText(session.getSessionType() + " " + session.getAcademicYear().getYear());
    }

    private void loadSubjectCbx() {
        List<Subject> allSubjects = SubjectService.getAllSubjects();
        subjectCbx.removeAllItems();
        subjectCbx.addItem(null);
        for (Subject obj : allSubjects) {
            subjectCbx.addItem(obj);
        }
    }

    private void loadCorrectorCbx() {
        List<Corrector> allCorrectors = CorrectorService.getCorrectorList();
        correctorCbx.removeAllItems();
        correctorCbx.addItem(null);
        for (Corrector objCor : allCorrectors) {
            correctorCbx.addItem(objCor);
        }
    }

    private void populateExamTable(Session session, Subject subject, Corrector corrector) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        examTable.setModel(model);

        String[] columnNames = {"ID", "Exam Number", "Date", "Modality"};
        model.setColumnIdentifiers(columnNames);

        examTable.getColumnModel().getColumn(0).setMinWidth(0);
        examTable.getColumnModel().getColumn(0).setMaxWidth(0);
        examTable.getColumnModel().getColumn(0).setWidth(0);

        List<Exam> exams = SessionSubjectService.getExamsBySessionAndSubject(session, subject);

        int examNumber = 0;
        for (Exam objExam : exams) {
            examNumber++;
            Object[] row = {objExam.getId(), examNumber, objExam.getDate(), objExam.getModality()};
            model.addRow(row);
        }

        examTable.setCellSelectionEnabled(false);
        examTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        examTable.setRowSelectionAllowed(true);
        examTable.setColumnSelectionAllowed(false);
    }

    private void printExercises(Exam exam, Corrector corrector, Student student) {
        examSection.removeAll();
        examSection.setLayout(new BoxLayout(examSection, BoxLayout.Y_AXIS));

        int counter = 0;
        List<Answer> answersList = ExamService.getStudentAnswersList(exam, student, corrector);
        List<Question> allQuestions = new ArrayList<>();
        List<JTextField> marksTextFields = new ArrayList<>(); // New ArrayList to store the text fields

        Font exerciseFont = new Font(examSection.getFont().getName(), Font.BOLD, 16);
        Font questionFont = new Font(examSection.getFont().getName(), Font.BOLD, 14);
        Font answerFont = new Font(examSection.getFont().getName(), Font.PLAIN, 12);

        JLabel studentLabel = new JLabel("Student " + student + "'s exam");
        studentLabel.setFont(new Font(studentLabel.getFont().getName(), Font.BOLD, 18));
        examSection.add(studentLabel);

        examSection.add(Box.createVerticalStrut(10)); // Add vertical spacing

        for (Exercise exercise : exam.getExercises()) {
            ++counter;
            Exercise currentExercise = ExerciseService.getExerciseById(exercise.getId());

            JLabel exerciseLabel = new JLabel(counter + ". " + currentExercise.getContent());
            exerciseLabel.setFont(exerciseFont); // Set the exercise label font size
            examSection.add(exerciseLabel);

            examSection.add(Box.createVerticalStrut(5)); // Add vertical spacing

            List<Question> questions = currentExercise.getQuestions();
            for (int i = 0; i < questions.size(); i++) {
                Question question = questions.get(i);
                JLabel questionLabel = new JLabel(question.getNumber() + ". " + question.getContent() + "    (" + question.getScaleScore() + ")");
                questionLabel.setFont(questionFont); // Set the question label font size and style
                examSection.add(questionLabel);

                Answer validAnswer = QuestionService.findValidAnswer(answersList, question);

                JLabel answerTextLabel = new JLabel("Answer: " + validAnswer.getAnswerText());
                answerTextLabel.setFont(answerFont); // Set the answer label font size and style
                examSection.add(answerTextLabel);

                JPanel marksPanel = new JPanel();
                marksPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
                marksPanel.setAlignmentX(Component.LEFT_ALIGNMENT);

                JLabel marksLabel = new JLabel("Mark: ");
                marksLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5)); // Add left padding

                JTextField marksTextField = new JTextField(2); // Adjust the width as per your preference
                marksTextField.setHorizontalAlignment(JTextField.CENTER); // Center align the text in the text field
                marksTextField.setFont(marksTextField.getFont().deriveFont(Font.PLAIN, 12)); // Set the text field font size and style
                marksTextFields.add(marksTextField); // Add the text field to the list

                marksPanel.add(marksLabel);
                marksPanel.add(marksTextField);

                examSection.add(marksPanel);

                allQuestions.add(question);
            }

            examSection.add(Box.createVerticalStrut(10)); // Add vertical spacing
        }

        JButton submitButton = new JButton("Save");
        examSection.add(submitButton);

        // Add an action listener to the submit button
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Save functionality - Example implementation
                for (int i = 0; i < allQuestions.size(); i++) {
                    Question question = allQuestions.get(i);
                    Question currentQuestion = QuestionService.getQuestionById(question.getId());

                    JTextField marksTextField = marksTextFields.get(i); // Get the corresponding text field

                    Answer currentAnswer = QuestionService.findValidAnswer(answersList, question);

                    currentAnswer.setCorrector1Mark(corrector, Double.valueOf(marksTextField.getText()));
                    currentAnswer.setCorrector1(corrector);
                    currentQuestion.setAnswer(currentAnswer);
                    AnswerService.updateAnswer(currentAnswer);
                    QuestionService.updateAnswerFromQuestion(question, currentAnswer);
                }
                JOptionPane.showMessageDialog(null, "Exam Corrected!", "Success", JOptionPane.INFORMATION_MESSAGE);
                Corrector_Interface corrector_Interface = new Corrector_Interface(session);
                corrector_Interface.setVisible(true);
                dispose();
            }
        });

        examSection.revalidate();
        examSection.repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton correct;
    private javax.swing.JComboBox<Corrector> correctorCbx;
    private javax.swing.JPanel examSection;
    private javax.swing.JTable examTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel returnToMenu;
    private javax.swing.JLabel sessionType;
    private javax.swing.JComboBox<Student> studentCbx;
    private javax.swing.JComboBox<Subject> subjectCbx;
    // End of variables declaration//GEN-END:variables
}
